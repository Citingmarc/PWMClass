#pragma once

/**
 * @brief PWM Generator class
 *
 * The PWM signal is generated by calling the functor on a timer interrupt
 * Every 256 calls the PWM signal completes one cycle
 * The timer on the interrupt should be defined by the desired period / 256
 *
 * @tparam OP template for the functor
 */
template<typename OP>
class PWM
{
private:
    uint8_t m_duty;
    OP m_pin;
    uint8_t m_pulse;

public:

    /**
     * @brief Parametrized PWM Constructor
     *
     * @param duty uint8_t Duty cycle value, from 0 to 255
     * @param pin Pin to be used for the PWM
     */
    PWM(uint8_t duty, OP pin) :
        m_duty(duty), m_pin(pin), m_pulse(0) {}

    /**
     * @brief Get the Duty cycle
     *
     * @return uint8_t
     */
    uint8_t getDuty() {
        return m_duty;
    }

    /**
     * @brief Set the Duty cycle
     *
     * @param duty unit8_t from 0 to 255
     * @return uint8_t
     */
    uint8_t setDuty(uint8_t duty) {
        m_duty = duty;
        return m_duty;
    }

    /**
     * @brief Reads current PWM output
     *
     * @return uint8_t
     */
    uint8_t readPin() {
        return m_pin;
    }

    /**
     * @brief Functor to change PWM state.
     *
     * It will complete a pulse once every 256 times called.
     *
     * @return Pin status
     */
    OP operator()()
    {
        m_pulse = (m_pulse + 1) % 256;

        if (m_pulse > m_duty || m_pulse == 1) {
            m_pin = (bool)((m_duty > m_pulse) + (m_duty == 255));
        }

        return m_pin;
    }
};